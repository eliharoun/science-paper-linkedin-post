from utils.agi_client_factory import AgiClient, LocalModelClient
import logging
from utils.paper import Paper

logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# LinkedIn post prompt
linkedin_post_system_prompt = """You are an experienced technical blogger writing for a professional LinkedIn audience. 
        Write in a clear, engaging style that balances technical depth with accessibility. 
        Focus on providing actionable insights and real-world applications. Keep content concise and impactful, as LinkedIn posts should be attention-grabbing yet valuable. 
        Include relevant technical details while avoiding overly academic language."""


class LinkedInPostGenerator:
    def __init__(self, agi_client: AgiClient):
        """
        Initialize the LinkedIn Post Generator.

        Args:
            agi_client (AgiClient): The AGI client instance used for generating content.
        """
        self.agi_client = agi_client
        self.local_mode = isinstance(self.agi_client, LocalModelClient)
        if self.local_mode:
            logger.debug("Running in local mode.")

    def generate_linkedin_post(self, paper: Paper) -> str:
        """
        Generate a LinkedIn post for a given research paper.

        Args:
            paper: Paper object containing paper details

        Returns:
            Post content generated by the AGI model
        """

        prompt = self._generate_user_prompt(paper)

        model_input = {
            "max_tokens": 2000,
            "temperature": 0,
            "system": linkedin_post_system_prompt,
            "prompt": prompt,
            "pdf_path": paper.pdf_path,
        }

        try:
            return self.agi_client.get_response(model_input=model_input)

        except Exception as e:
            logger.error(
                f"Error generating LinkedIn post for {paper['title']}: {str(e)}"
            )
            return None

    def _generate_user_prompt(self, paper: Paper) -> str:
        """
        Generate a prompt for the AGI model based on the paper details.

        Args:
            paper: Paper object containing paper details

        Returns:
            Prompt string
        """

        return f"""Analyze this research paper thoroughly:

        Title: {paper.title}
        Abstract: {paper.abstract}

        Paper Format: {paper.format}

        Key Findings:
        {paper.key_findings}

        Technical Innovation:
        {paper.technical_innovation}

        Practical Applications:
        {paper.practical_applications}

        Impact Analysis:
        {paper.impact_analysis}

        Paper URL:
        {paper.url}

        Full Paper: 
        {paper.full_text if self.local_mode else paper.url}

        Create an engaging LinkedIn post that would interest technical professionals (Software engineers, Machine Learning Engineers, Scientists, Technical Product Managers and Project Managers). The post should be between 1,300 and 1,800 characters.

        Guidelines for the post:
        1. Start with an attention-grabbing hook related to real-world impact
        2. Break down complex technical concepts into simple explanations, but without comparisons or illustrative explanations.
        3. You must only use information from the paper being analyzed. Do not invent new information.
        4. Highlight the most innovative aspects and practical applications
        5. Include relevant statistics or findings if available
        6. Use 2-3 relevant emojis naturally
        7. Structure with short, scannable paragraphs
        8. End with an engaging question
        9. Add "Thoughts? ðŸ’­" at the end
        10. Add a source to the paper link at the end of the post. In the format: "ðŸ”— Source: [Paper Title] [Paper URL]"
        11. Include 4 most relevant hashtags then end them with the hashtag #ReadMorePapers at the end

        Focus on making the content both engaging and valuable for a professional audience.
        """
