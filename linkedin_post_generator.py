from agi_client_factory import AgiClient, AnthropicClient
import logging
from paper import Paper
import base64

logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


class LinkedInPostGenerator:
    def __init__(self, agi_client: AgiClient, model_name: str = "claude-3-5-sonnet-20241022"):
        """
        Initialize the LinkedIn Post Generator.

        Args:
            agi_client (AgiClient): The AGI client instance used for generating content.
        """
        self.agi_client = agi_client
        self.model_name = model_name

    def generate_linkedin_post(self, paper: Paper) -> str:
        """
        Generate a LinkedIn post for a given research paper.

        Args:
            paper: Paper object containing paper details

        Returns:
            Post content generated by the AGI model
        """

        content = self._generate_prompt_content(paper)
        system_context = """You are an experienced technical blogger writing for a professional LinkedIn audience. 
        Write in a clear, engaging style that balances technical depth with accessibility. 
        Focus on providing actionable insights and real-world applications. Keep content concise and impactful, as LinkedIn posts should be attention-grabbing yet valuable. 
        Include relevant technical details while avoiding overly academic language."""

        model_input = {
            "model": self.model_name,
            "max_tokens": 2000,
            "temperature": 0,
            "system": system_context,
            "messages": [{"role": "user", "content": content}],
        }

        try:
            return self.agi_client.get_response(model_input=model_input, prompt_caching=True)

        except Exception as e:
            logger.error(
                f"Error generating LinkedIn post for {paper['title']}: {str(e)}"
            )
            return None

    def _generate_prompt_content(self, paper: Paper):
        """
        Generate a prompt for the AGI model based on the paper details.

        Args:
            paper: Paper object containing paper details

        Returns:
            Prompt string
        """

        prompt = f"""Analyze this research paper thoroughly:

    Title: {paper.title}
    Abstract: {paper.abstract}

    Paper Format: {paper.format}

    Key Findings:
    {paper.key_findings}

    Technical Innovation:
    {paper.technical_innovation}

    Practical Applications:
    {paper.practical_applications}

    Impact Analysis:
    {paper.impact_analysis}

    Create an engaging LinkedIn post that would interest both technical and non-technical professionals. The post should be between 1,300 and 2,000 characters.

    Guidelines for the post:
    1. Start with an attention-grabbing hook related to real-world impact
    2. Break down complex technical concepts into simple, relatable explanations
    3. Highlight the most innovative aspects and practical applications
    4. Include relevant statistics or findings if available
    5. Use 2-4 relevant emojis naturally
    6. Structure with short, scannable paragraphs
    7. End with an engaging question
    8. Add "Thoughts? ðŸ’­" at the end

    Focus on making the content both engaging and valuable for a professional audience.
    """

        return self.agi_client.get_pdf_prompt_content(prompt, paper.pdf_file)
